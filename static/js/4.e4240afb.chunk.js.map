{"version":3,"sources":["containers/EWallet.js"],"names":["EWallet","state","transactionID","balance","depositDiag","withdrawDiag","transactionAmount","transactions","handleTransactionAdditionAction","isAddOperation","setState","transaction","Object","amount","transactionType","transactionTemp","push","window","localStorage","setItem","JSON","stringify","deleteTransaction","index","findIndex","x","splice","forEach","console","log","this","props","transactionData","parse","getItem","Array","isArray","length","balancestyle","color","style","label","onClick","header","visible","onHide","closeOnEscape","dismissableMask","value","locale","currency","onChange","e","focusOnShow","responsive","field","Component"],"mappings":"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","file":"static/js/4.e4240afb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport HOC from '../hoc/AuxHoc'\r\nimport { Button } from 'primereact/button'\r\nimport { Dialog } from 'primereact/dialog'\r\nimport { InputNumber } from 'primereact/inputnumber'\r\nimport { DataTable } from 'primereact/datatable'\r\nimport { Column } from 'primereact/column'\r\nclass EWallet extends Component {\r\n    state = {\r\n        transactionID: 0,\r\n        balance: 0,\r\n        depositDiag: false,\r\n        withdrawDiag: false,\r\n        transactionAmount: 0,\r\n        transactions: []\r\n    };\r\n\r\n\r\n    // componentDidMount(){\r\n    // }\r\n\r\n    componentDidMount() {\r\n        console.log(\"EWallet - APP - PROPS\", this.props);\r\n        console.log(\"EWallet - APP - STATE\", this.state);\r\n        let transactionData = JSON.parse(window.localStorage.getItem('transactions'));\r\n        if(!Array.isArray(transactionData)){\r\n            transactionData = [];\r\n        }\r\n        const transactionID = JSON.parse(window.localStorage.getItem('transactionID'));\r\n        let balance = JSON.parse(window.localStorage.getItem('balance'));\r\n        if (transactionData && transactionData.length === 0) {\r\n            balance = 0;\r\n        }\r\n        this.setState({ transactionID: transactionID, transactions: [...transactionData], balance: balance })\r\n    }\r\n\r\n    handleTransactionAdditionAction = (isAddOperation) => {\r\n        if (this.state.transactionAmount) {\r\n            let balance = this.state.balance;\r\n            let transactionID = this.state.transactionID + 1;\r\n            balance = isAddOperation == true ? balance + this.state.transactionAmount : balance - this.state.transactionAmount;\r\n            this.setState({ balance: balance });\r\n\r\n            let transaction = new Object;\r\n            let amount = this.state.transactionAmount\r\n            transaction.transactionAmount = amount;\r\n            transaction.transactionType = isAddOperation ? 'D' : 'W';\r\n            transaction.balance = balance;\r\n            transaction.transactionID = transactionID;\r\n\r\n            var transactionTemp = this.state.transactions;\r\n            transactionTemp.push(transaction);\r\n            this.setState({ transaction: transactionTemp, transactionID: transactionID });\r\n            window.localStorage.setItem('transactionID', transactionID);\r\n            window.localStorage.setItem('balance', balance);\r\n            window.localStorage.setItem('transactions', JSON.stringify([...transactionTemp]));\r\n        }\r\n    }\r\n\r\n    deleteTransaction = (transactionID) => {\r\n        let transactions = this.state.transactions;\r\n        const index = transactions.findIndex((x) => x.transactionID == transactionID);\r\n        if (index !== -1) {\r\n            let balance = this.state.balance;\r\n            const removedTransactions = transactions.splice(index, 1);\r\n            removedTransactions.forEach(x => {\r\n                balance = x.transactionType === 'D' ? balance - x.transactionAmount : balance + x.transactionAmount;\r\n                transactions.forEach(transactionTemp => {\r\n                    if (transactionTemp.transactionID >= transactionID) {\r\n                        transactionTemp.balance = x.transactionType === 'D' ?\r\n                            transactionTemp.balance - x.transactionAmount :\r\n                            transactionTemp.balance + x.transactionAmount;\r\n                    }\r\n                })\r\n\r\n            })\r\n            this.setState({ balance: balance, transactions: transactions });\r\n            window.localStorage.setItem('balance', balance);\r\n            window.localStorage.setItem('transactions', JSON.stringify([...transactions]));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const balancestyle = this.state.balance < 0 ? { color: 'red' } : null;\r\n        return (\r\n            <HOC>\r\n                <div>\r\n                    <p><strong>BALANCE :: <label style={balancestyle}>{this.state.balance}</label></strong></p>\r\n                </div>\r\n                <div>\r\n                    <Button label='Deposit' onClick={() => this.setState({ depositDiag: true })}></Button>\r\n                    <Button label='Withdraw' onClick={() => this.setState({ withdrawDiag: true })}></Button>\r\n                    <Dialog header=\"Deposit\" visible={this.state.depositDiag}\r\n                        onHide={() => { this.setState({ depositDiag: false, transactionAmount: 0 }) }}\r\n                        closeOnEscape={true}\r\n                        dismissableMask={true}\r\n                    >\r\n                        <Button label='Deposit'\r\n                            onClick={() => { this.handleTransactionAdditionAction(true); this.setState({ depositDiag: false }) }}>\r\n                        </Button>\r\n                        <InputNumber value={this.state.transactionAmount} locale='en-IN' currency='INR'\r\n                            onChange={(e) => { this.setState({ transactionAmount: e.value }) }} focusOnShow={true} />\r\n                    </Dialog>\r\n                    <Dialog header=\"Withdraw\" visible={this.state.withdrawDiag}\r\n                        onHide={() => { this.setState({ withdrawDiag: false, transactionAmount: 0 }) }}\r\n                        closeOnEscape={true}\r\n                        dismissableMask={true}\r\n                    >\r\n                        <Button label='Withdraw'\r\n                            onClick={() => { this.handleTransactionAdditionAction(false); this.setState({ withdrawDiag: false }) }}></Button>\r\n                        <InputNumber value={this.state.transactionAmount} locale='en-IN' currency='INR'\r\n                            onChange={(e) => this.setState({ transactionAmount: e.value })} focusOnShow={true} />\r\n                    </Dialog>\r\n                </div>\r\n                <div>\r\n                    Component for showing Ledger\r\n                    <DataTable value={this.state.transactions} responsive={true}>\r\n                        <Column field={(x) => x['transactionType'] === 'D' ?\r\n                            <strong style={{ color: 'green' }}>Deposit</strong> :\r\n                            <strong style={{ color: 'red' }}>Withdraw</strong>}\r\n                            header=\"TRANSACTION TYPE\"></Column>\r\n                        <Column field=\"transactionAmount\" header=\"AMOUNT\"></Column>\r\n                        <Column field=\"balance\" header=\"BALANCE\"></Column>\r\n                        <Column header=\"DELETE\" field={x => {\r\n                            return <Button label='X' onClick={() => this.deleteTransaction(x.transactionID)} />\r\n                        }}>\r\n                        </Column>\r\n                    </DataTable>\r\n                </div>\r\n            </HOC>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EWallet;"],"sourceRoot":""}